:mod:`imcascade`
================

.. py:module:: imcascade

.. autoapi-nested-parse::

   imcascade: A non-parametric framework for fitting astronomical sources in 2D using series of Gaussians



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   fitter/index.rst
   mgm/index.rst
   psf_fitter/index.rst
   results/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   imcascade.Fitter
   imcascade.ImcascadeResults




Attributes
~~~~~~~~~~

.. autoapisummary::

   imcascade.__version__


.. data:: __version__
   :annotation: = 0.1

   

.. class:: Fitter(img, sig, psf_sig, psf_a, weight=None, mask=None, sky_model=True, render_mode='hybrid', log_weight_scale=True, verbose=True, psf_shape=None, init_dict={}, bounds_dict={}, log_file=None)


   Bases: :py:obj:`imcascade.mgm.MultiGaussModel`

   A Class used fit images with MultiGaussModel

   This is the main class used to fit ``imcascade`` models

   :param img: Data to be fit, it is assumed to be a cutout with the object of interest
               in the center of the image
   :type img: 2D Array
   :param sig: Widths of Gaussians to be used in MultiGaussModel
   :type sig: 1D Array
   :param psf_sig: Width of Gaussians used to approximate psf
   :type psf_sig: 1D array, None
   :param psf_a: Weights of Gaussians used to approximate psf
                 If both psf_sig and psf_a are None then will run in Non-psf mode
   :type psf_a: 1D array, None
   :param weight: Array of pixel by pixel weights to be used in fitting. Must be same
                  shape as 'img' If None, all the weights will be set to 1.
   :type weight: 2D Array, optional
   :param mask: Array with the same shape as 'img' denoting which, if any, pixels
                to mask  during fitting process. Values of '1' or 'True' values for
                the pixels to be masked. If set to 'None' then will not mask any
                pixels. In practice, the weights of masked pixels is set to '0'.
   :type mask: 2D Array, optional
   :param sky_model: If True will incorperate a tilted plane sky model. Reccomended to be set
                     to True
   :type sky_model: bool, optional
   :param render_mode: Option to decide how to render models. 'erf' analytically computes
                       the integral over the pixel of each profile therefore is more accurate
                       but more computationally intensive. 'gauss' assumes the center of a pixel
                       provides a reasonble estimate of the average flux in that pixel. 'gauss'
                       is faster but far less accurate for objects which vary on O(pixel size),
                       so use with caution. 'hybrid' is the defualt, uses 'erf' for components with width < 5
                       to ensure accuracy and uses 'gauss' otherwise as it is accurate enough and faster. Also
                       assumes all flux > 5 sigma for components is 0.
   :type render_mode: 'hybrid', 'erf' or 'gauss'
   :param log_weight_scale: Wether to treat weights as log scale, Default True
   :type log_weight_scale: bool, optional
   :param verbose: If true will log and print out errors
   :type verbose: bool, optional
   :param psf_shape: Dictionary containg at 'q' and 'phi' that define the shape of the PSF.
                     Note that this slows down model rendering significantly so only
                     reccomended if neccesary.
   :type psf_shape: dict, Optional
   :param init_dict: Dictionary specifying initial guesses for least_squares fitting. The code
                     is desigined to make 'intelligent' guesses if none are provided
   :type init_dict: dict, Optional
   :param bounds_dict: Dictionary specifying boundss for least_squares fitting and priors. The code
                       is desigined to make 'intelligent' guesses if none are provided
   :type bounds_dict: dict, Optional

   .. method:: resid_1d(self, params)

      Given a set of parameters returns the 1-D flattened residuals
      when compared to the Data, to be used in run_ls_min Function

      :param params: List of parameters to define model
      :type params: Array

      :returns: **resid_flatten** -- 1-D array of the flattened residuals
      :rtype: array


   .. method:: run_ls_min(self, ls_kwargs={})

      Function to run a least_squares minimization routine using pre-determined
      inital guesses and bounds.

      Utilizes the scipy least_squares routine (https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html)

      :param ls_kwargs: Optional list of arguments to be passes to least_squares routine
      :type ls_kwargs: dict, optional

      :returns: **min_param** -- Returns a 1D array containing the optimized parameters that describe
                the best fit model.
      :rtype: 1D array


   .. method:: set_up_express_run(self, set_params=None)

      Function to set up 'express' run using pre-rendered images with a
      fixed x0,y0, phi and q. Sets class attribute 'express_gauss_arr' which
      is needed to run dynesty or emcee in express mode

      :param set_params: Parameters (x0,y0,q,phi) to use to per-render images. If None will
                         call ``run_ls_min()`` or use stored ``min_res`` to find parameters.
      :type set_params: len(4) array-like, optional

      :returns: **express_gauss_arr** -- Returns a 3-D with pre-rendered images based on input parameters
      :rtype: array (shape[0],shape[1], Ndof_gauss)


   .. method:: make_express_model(self, exp_params)

      Function to generate a model for a given set of paramters,
      specifically using the pre-renedered model for the 'express' mode

      :param exo_params: List of parameters to define model. Length is Ndof_gauss + Ndof_sky
                         since the structural parameters (x0,y0,q, PA) are set
      :type exo_params: Array

      :returns: **model** -- Model image based on input parameters
      :rtype: 2D-array


   .. method:: chi_sq(self, params)

      Function to calculate chi_sq for a given set of paramters

      :param params: List of parameters to define model
      :type params: Array

      :returns: **chi^2** -- Chi squared statistic for the given set of parameters
      :rtype: float


   .. method:: log_like(self, params)

      Function to calculate the log likeliehood for a given set of paramters

      :param params: List of parameters to define model
      :type params: Array

      :returns: **log likeliehood** -- log likeliehood for a given set of paramters, defined as -0.5*chi^2
      :rtype: float


   .. method:: ptform(self, u)

      Prior transformation function to be used in dynesty 'full' mode

      :param u: array of random numbers from 0 to 1
      :type u: array

      :returns: **x** -- array containing distribution of parameters from prior
      :rtype: array


   .. method:: log_like_exp(self, exp_params)

      Function to calculate the log likeliehood for a given set of paramters,
      specifically using the pre-renedered model for the 'express' mode

      :param exo_params: List of parameters to define model. Length is Ndof_gauss + Ndof_sky
                         since the structural parameters (x0,y0,q, PA) are set
      :type exo_params: Array

      :returns: **log likeliehood** -- log likeliehood for a given set of paramters, defined as -0.5*chi^2
      :rtype: float


   .. method:: ptform_exp_ls(self, u)

      Prior transformation function to be used in dynesty 'express' mode using
      gaussian priors defined by the results of the least_squares minimization

      :param u: array of random numbers from 0 to 1
      :type u: array

      :returns: **x** -- array containing distribution of parameters from prior
      :rtype: array


   .. method:: ptform_exp_unif(self, u)

      Prior transformation function to be used in dynesty 'express' mode using
      unifrom priors defined by self.lb and self.ub

      :param u: array of random numbers from 0 to 1
      :type u: array

      :returns: **x** -- array containing distribution of parameters from prior
      :rtype: array


   .. method:: run_dynesty(self, method='full', sampler_kwargs={}, run_nested_kwargs={}, prior='min_results')

      Function to run dynesty to sample the posterier distribution using either the
      'full' methods which explores all paramters, or the 'express' method which sets
      the structural parameters.

      :param method: Which method to use to run dynesty
      :type method: str: 'full' or 'express'
      :param sampler_kwargs: set of keyword arguments to pass the the dynesty DynamicNestedSampler call, see:
                             https://dynesty.readthedocs.io/en/latest/api.html#dynesty.dynesty.DynamicNestedSampler
      :type sampler_kwargs: dict
      :param run_nested_kwargs: set of keyword arguments to pass the the dynesty run_nested call, see:
                                https://dynesty.readthedocs.io/en/latest/api.html#dynesty.dynamicsampler.DynamicSampler.run_nested
      :type run_nested_kwargs: dict
      :param prior: Which of the two choices of priors to use. The `min_results` priors are Gaussian,
                    with centers defined by the best fit paramters and variance equal to 4 times
                    the variance estimated using the Hessian matrix from the run_ls_min() run.
                    `uniform` is what it sounds like, uniform priors based on the the lower and upper bounds
                    Defualt is `min_results`
      :type prior: 'min_results' or 'uniform'

      :returns: **Posterior** -- Posterier distribution derrived. If method is 'express', the first 4 columns,
                containg x0, y0, PA and q, are all the same and equal to values used to pre-render the images
      :rtype: Array


   .. method:: save_results(self, file_name, run_basic_analysis=True, thin_posterier=1, zpt=None, cutoff=None, errp_lo=16, errp_hi=84)

      Function to save results after run_ls_min, run_dynesty and/or run_emcee is performed. Will be saved as an ASDF file.

      :param file_name: Str defining location of where to save data
      :type file_name: str
      :param run_basic_analysis: If true will run ImcascadeResults.run_basic_analysis
      :type run_basic_analysis: Bool (default True)

      :returns: **Posterior** -- Posterier distribution derrived. If method is 'express', the first 4 columns,
                containg x0,y0,PA and q, are all the same and equal to values used to pre-rended the images
      :rtype: Array



.. class:: ImcascadeResults(Obj, thin_posterier=1)


   A class used for collating imcascade results and performing analysis

   :param Obj: Object which contains the data to be analyzed. Can be a Fitter object
               once the run_(ls_min,dynesty, emcee) has been ran. If it is a dictionay
               needs to contain, at bare minmum the variables sig, Ndof, Ndof_sky,
               Ndof_gauss, log_weight_scale and either min_param or posterier.
               If a string is passed it will be interreted as a file locations with
               an ASDF file containing the neccesary information.
   :type Obj: imcascade.fitter.Fitter class, dictionary or str
   :param thin_posterier: Factor by which to thin the posterier distribution by. While one wants
                          to ensure the posterier is large enough, some of this analysis can
                          take time if you have >10^6 samples so this is one way to speed up
                          this task but use with caution.
   :type thin_posterier: int (optional)

   .. method:: calc_flux(self, cutoff=None)

      Calculate flux of given results

      :param cutoff: Radius out to which to consider the profile. Generally this should be
                     around the half-width of the image or the largest gaussian width use
      :type cutoff: float (optional)

      :returns: **Flux** -- Total flux of best fit model
      :rtype: float or Array


   .. method:: _min_calc_rX(self, X, cutoff=None)

      Old and slow Function to calculate the radius containing X percent of the light

      :param X: Fractional radius of intrest to calculate. if X < 1 will take as a fraction,
                else will interpret as percent and divide X by 100. i.e. to calculate
                the radius containing 20% of the light, once can either pass X = 20 or 0.2
      :type X: float
      :param cutoff: Radius out to which to consider the profile. Generally this should be
                     around the half-width of the image or the largest gaussian width used
      :type cutoff: float (optional)

      :returns: **r_X** -- The radius containg X percent of the light
      :rtype: float or Array


   .. method:: calc_rX(self, X, cutoff=None)

      Function to calculate the radius containing X percent of the light

      :param X: Fractional radius of intrest to calculate. if X < 1 will take as a fraction,
                else will interpret as percent and divide X by 100. i.e. to calculate
                the radius containing 20% of the light, once can either pass X = 20 or 0.2
      :type X: float
      :param cutoff: Radius out to which to consider the profile. Generally this should be
                     around the half-width of the image or the largest gaussian width used
      :type cutoff: float (optional)

      :returns: **r_X** -- The radius containg X percent of the light
      :rtype: float or Array


   .. method:: calc_r90(self, cutoff=None)

      Wrapper function to calculate the radius containing 90% of the light

      :param cutoff: Radius out to which to consider the profile. Generally this should be
                     around the half-width of the image or the largest gaussian width use
      :type cutoff: float (optional)

      :returns: **r_90** -- The radius containg 90 percent of the light
      :rtype: float or Array


   .. method:: calc_r80(self, cutoff=None)

      Wrapper function to calculate the radius containing 80% of the light

      :param cutoff: Radius out to which to consider the profile. Generally this should be
                     around the half-width of the image or the largest gaussian width use
      :type cutoff: float (optional)

      :returns: **r_80** -- The radius containg 80 percent of the light
      :rtype: float or Array


   .. method:: calc_r50(self, cutoff=None)

      Wrapper function to calculate the radius containing 50% of the light,
      or the effective radius

      :param cutoff: Radius out to which to consider the profile. Generally this should be
                     around the half-width of the image or the largest gaussian width use
      :type cutoff: float (optional)

      :returns: **r_50** -- The radius containg 50 percent of the light
      :rtype: float or Array


   .. method:: calc_r20(self, cutoff=None)

      Wrapper function to calculate the radius containing 20% of the light

      :param cutoff: Radius out to which to consider the profile. Generally this should be
                     around the half-width of the image or the largest gaussian width use
      :type cutoff: float (optional)

      :returns: **r_20** -- The radius containg 20 percent of the light
      :rtype: float or Array


   .. method:: calc_sbp(self, r, return_ind=False)

      Function to calculate surface brightness profiles for the given results

      :param r: Radii (in pixels) at which to evaluate the surface brightness profile
      :type r: float or array
      :param return_ind: If False will only return the sum of all gaussian, i.e. the best fit profile.
                         If true will return an array with +1 dimensions containing the profiles
                         of each individual gaussian component
      :type return_ind: bool (optional)

      :returns: **SBP** -- Surface brightness profiles evaluated at 'r'. If 'return_ind = True',
                returns the profile of each individual gaussian component
      :rtype: array


   .. method:: calc_obs_sbp(self, r, return_ind=False)

      Function to calculate the observed surface brightness profiles, i.e. convolved with the PSF for the given results

      :param r: Radii (in pixels) at which to evaluate the surface brightness profile
      :type r: float or array
      :param return_ind: If False will only return the sum of all gaussian, i.e. the best fit profile.
                         If true will return an array with +1 dimensions containing the profiles
                         of each individual gaussian component
      :type return_ind: bool (optional)

      :returns: **obsereved SBP** -- Observed surface brightness profiles evaluated at 'r'. If 'return_ind = True',
                returns the profile of each individual gaussian component
      :rtype: array


   .. method:: calc_cog(self, r, return_ind=False, norm=False, cutoff=None)

      Function to calculate curves-of-growth for the given results

      :param r: Radii (in pixels) at which to evaluate the surface brightness profile
      :type r: float or array
      :param return_ind: If False will only return the sum of all gaussian, i.e. the best fit profile.
                         If true will return an array with +1 dimensions containing the profiles
                         of each individual gaussian component
      :type return_ind: bool (optional)
      :param norm: Wether to normalize curves-of-growth to total flux, calculated using
                   'self.calc_flux'. Does nothing if 'return_ind = True'
      :type norm: Bool (optional)
      :param cutoff: Cutoff radius used in 'self.calc_flux', only is used if 'norm' is True
      :type cutoff: Float (optional)

      :returns: **COG** -- curves-of-growth evaluated at 'r'. If 'return_ind = True',
                returns the profile of each individual gaussian component
      :rtype: array


   .. method:: calc_obs_cog(self, r, return_ind=False, norm=False, cutoff=None)

      Function to calculate the observed curve of growth, i.e. convolved with the PSF for the given results

      :param r: Radii (in pixels) at which to evaluate the surface brightness profile
      :type r: float or array
      :param return_ind: If False will only return the sum of all gaussian, i.e. the best fit profile.
                         If true will return an array with +1 dimensions containing the profiles
                         of each individual gaussian component
      :type return_ind: bool (optional)
      :param norm: Wether to normalize curves-of-growth to total flux, calculated using
                   'self.calc_flux'. Does nothing if 'return_ind = True'
      :type norm: Bool (optional)
      :param cutoff: Cutoff radius used in 'self.calc_flux', only is used if 'norm' is True
      :type cutoff: Float (optional)

      :returns: **observed COG** -- curves-of-growth evaluated at 'r'. If 'return_ind = True',
                returns the profile of each individual gaussian component
      :rtype: array


   .. method:: run_basic_analysis(self, zpt=None, cutoff=None, errp_lo=16, errp_hi=84, save_results=False, save_file='./imcascade_results.asdf')

      Function to calculate a set of common variables and save the save the results

      :param zpt: photometric zeropoint for the data. if not 'None', will also calculate
                  magnitude
      :type zpt: float (optional)
      :param cutoff: Radius out to which to consider the profile. Generally this should be
                     around the half-width of the image or the largest gaussian width use
      :type cutoff: float (optional)
      :param errp_(lo,hi): percentiles to be used to calculate the lower and upper error bars from
                           the posterier distribution. Default is 16 and 84, corresponding to 1-sigma
                           for a guassian distribtuion
      :type errp_(lo,hi): float (optional)
      :param save_results: If true will save results to file. If input is a file, will add
                           to given file, else will save to file denoted by 'save_file' (see below)
      :type save_results: bool (optional)
      :param save_file: String to describe where to save file, only applicaple if the input
                        is not a file.
      :type save_file: str

      :returns: **res_dict** -- Dictionary contining the results of the analysis
      :rtype: dictionary


   .. method:: calc_iso_r(self, I, zpt=None, pix_scale=None)

      Function to calculate the isophotal radius

      :param I: Surface brightness target to define the isophotal radii. By defualt this shoud be in
                image units unless both zpt and pix_scale are given, then I is interpreted as
                mag per arcsec^2.
      :type I: float
      :param zpt: zeropoint magnitude of image, used to convert I to mag per arcsec^2
      :type zpt: float (optional)
      :param pix_scale: pixel scale in units of arcseconds/pixel, used to convert I to mag per arcsec^2
      :type pix_scale: float (optional)

      :returns: **r_I** -- The radius, in pixel units, where the surface brightness profile matches I
      :rtype: float or Array


   .. method:: calc_petro_r(self_cls, P_ratio=0.2, r_fac_min=0.8, r_fac_max=1.25)

      Function to calculate the petrosian radii of a galaxy

      :param P_ratio: The Petrosian ratio which defines the Petrosian radii, default is 0.2
      :type P_ratio: float (optional)
      :param r_fac_min: lower multiplicative factor which is used to integrate flux, default 0.8
      :type r_fac_min: float (optional)
      :param r_fac_max: higher multiplicative factor which is used to inegrate flux, default 1.25
      :type r_fac_max: float (optional)

      :returns: **r_I** -- The radius, in pixel units, where the surface brightness profile matches I
      :rtype: float or Array



