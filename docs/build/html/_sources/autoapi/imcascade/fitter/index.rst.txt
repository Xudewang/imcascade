:mod:`imcascade.fitter`
=======================

.. py:module:: imcascade.fitter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   imcascade.fitter.Fitter



Functions
~~~~~~~~~

.. autoapisummary::

   imcascade.fitter.fitter_from_ASDF
   imcascade.fitter.initialize_fitter



Attributes
~~~~~~~~~~

.. autoapisummary::

   imcascade.fitter.log2pi


.. data:: log2pi
   

   

.. function:: fitter_from_ASDF(file_name, init_dict={}, bounds_dict={})

   Function used to initalize a fitter from a saved asdf file

   This can be useful for re-running or for initializing a series
   of galaxies beforehand and then transferring to somewhere else or running in
   parallel

   :param file_name: location of asdf file containing saved data. Often this is a file created
                     by Fitter.save_results
   :type file_name: str
   :param init_dict: Dictionary specifying initial guesses for least_squares fitting to be passed
                     to Fitter instance.
   :type init_dict: dict (optional)
   :param bounds_dict: Dictionary specifying bounds for least_squares fitting to be passed
                       to Fitter instance.
   :type bounds_dict: dict (optional)


.. class:: Fitter(img, sig, psf_sig, psf_a, weight=None, mask=None, sky_model=True, render_mode='hybrid', log_weight_scale=True, verbose=True, psf_shape=None, init_dict={}, bounds_dict={}, log_file=None)


   Bases: :py:obj:`imcascade.mgm.MultiGaussModel`

   A Class used fit images with MultiGaussModel

   This is the main class used to fit ``imcascade`` models

   :param img: Data to be fit, it is assumed to be a cutout with the object of interest
               in the center of the image
   :type img: 2D Array
   :param sig: Widths of Gaussians to be used in MultiGaussModel
   :type sig: 1D Array
   :param psf_sig: Width of Gaussians used to approximate psf
   :type psf_sig: 1D array, None
   :param psf_a: Weights of Gaussians used to approximate psf
                 If both psf_sig and psf_a are None then will run in Non-psf mode
   :type psf_a: 1D array, None
   :param weight: Array of pixel by pixel weights to be used in fitting. Must be same
                  shape as 'img' If None, all the weights will be set to 1.
   :type weight: 2D Array, optional
   :param mask: Array with the same shape as 'img' denoting which, if any, pixels
                to mask  during fitting process. Values of '1' or 'True' values for
                the pixels to be masked. If set to 'None' then will not mask any
                pixels. In practice, the weights of masked pixels is set to '0'.
   :type mask: 2D Array, optional
   :param sky_model: If True will incorperate a tilted plane sky model. Reccomended to be set
                     to True
   :type sky_model: bool, optional
   :param render_mode: Option to decide how to render models. 'erf' analytically computes
                       the integral over the pixel of each profile therefore is more accurate
                       but more computationally intensive. 'gauss' assumes the center of a pixel
                       provides a reasonble estimate of the average flux in that pixel. 'gauss'
                       is faster but far less accurate for objects which vary on O(pixel size),
                       so use with caution. 'hybrid' is the defualt, uses 'erf' for components with width < 5
                       to ensure accuracy and uses 'gauss' otherwise as it is accurate enough and faster. Also
                       assumes all flux > 5 sigma for components is 0.
   :type render_mode: 'hybrid', 'erf' or 'gauss'
   :param log_weight_scale: Wether to treat weights as log scale, Default True
   :type log_weight_scale: bool, optional
   :param verbose: If true will log and print out errors
   :type verbose: bool, optional
   :param psf_shape: Dictionary containg at 'q' and 'phi' that define the shape of the PSF.
                     Note that this slows down model rendering significantly so only
                     reccomended if neccesary.
   :type psf_shape: dict, Optional
   :param init_dict: Dictionary specifying initial guesses for least_squares fitting. The code
                     is desigined to make 'intelligent' guesses if none are provided
   :type init_dict: dict, Optional
   :param bounds_dict: Dictionary specifying boundss for least_squares fitting and priors. The code
                       is desigined to make 'intelligent' guesses if none are provided
   :type bounds_dict: dict, Optional

   .. method:: resid_1d(self, params)

      Given a set of parameters returns the 1-D flattened residuals
      when compared to the Data, to be used in run_ls_min Function

      :param params: List of parameters to define model
      :type params: Array

      :returns: **resid_flatten** -- 1-D array of the flattened residuals
      :rtype: array


   .. method:: run_ls_min(self, ls_kwargs={})

      Function to run a least_squares minimization routine using pre-determined
      inital guesses and bounds.

      Utilizes the scipy least_squares routine (https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html)

      :param ls_kwargs: Optional list of arguments to be passes to least_squares routine
      :type ls_kwargs: dict, optional

      :returns: **min_param** -- Returns a 1D array containing the optimized parameters that describe
                the best fit model.
      :rtype: 1D array


   .. method:: set_up_express_run(self, set_params=None)

      Function to set up 'express' run using pre-rendered images with a
      fixed x0,y0, phi and q. Sets class attribute 'express_gauss_arr' which
      is needed to run dynesty or emcee in express mode

      :param set_params: Parameters (x0,y0,q,phi) to use to per-render images. If None will
                         call ``run_ls_min()`` or use stored ``min_res`` to find parameters.
      :type set_params: len(4) array-like, optional

      :returns: **express_gauss_arr** -- Returns a 3-D with pre-rendered images based on input parameters
      :rtype: array (shape[0],shape[1], Ndof_gauss)


   .. method:: make_express_model(self, exp_params)

      Function to generate a model for a given set of paramters,
      specifically using the pre-renedered model for the 'express' mode

      :param exo_params: List of parameters to define model. Length is Ndof_gauss + Ndof_sky
                         since the structural parameters (x0,y0,q, PA) are set
      :type exo_params: Array

      :returns: **model** -- Model image based on input parameters
      :rtype: 2D-array


   .. method:: chi_sq(self, params)

      Function to calculate chi_sq for a given set of paramters

      :param params: List of parameters to define model
      :type params: Array

      :returns: **chi^2** -- Chi squared statistic for the given set of parameters
      :rtype: float


   .. method:: log_like(self, params)

      Function to calculate the log likeliehood for a given set of paramters

      :param params: List of parameters to define model
      :type params: Array

      :returns: **log likeliehood** -- log likeliehood for a given set of paramters, defined as -0.5*chi^2
      :rtype: float


   .. method:: ptform(self, u)

      Prior transformation function to be used in dynesty 'full' mode

      :param u: array of random numbers from 0 to 1
      :type u: array

      :returns: **x** -- array containing distribution of parameters from prior
      :rtype: array


   .. method:: log_like_exp(self, exp_params)

      Function to calculate the log likeliehood for a given set of paramters,
      specifically using the pre-renedered model for the 'express' mode

      :param exo_params: List of parameters to define model. Length is Ndof_gauss + Ndof_sky
                         since the structural parameters (x0,y0,q, PA) are set
      :type exo_params: Array

      :returns: **log likeliehood** -- log likeliehood for a given set of paramters, defined as -0.5*chi^2
      :rtype: float


   .. method:: ptform_exp_ls(self, u)

      Prior transformation function to be used in dynesty 'express' mode using
      gaussian priors defined by the results of the least_squares minimization

      :param u: array of random numbers from 0 to 1
      :type u: array

      :returns: **x** -- array containing distribution of parameters from prior
      :rtype: array


   .. method:: ptform_exp_unif(self, u)

      Prior transformation function to be used in dynesty 'express' mode using
      unifrom priors defined by self.lb and self.ub

      :param u: array of random numbers from 0 to 1
      :type u: array

      :returns: **x** -- array containing distribution of parameters from prior
      :rtype: array


   .. method:: log_prior_express(self, params)

      Prior function to be used in emcee 'express' mode.
      By default they are all unifrom priors defined by self.lb and self.ub

      :param u: array of random numbers from 0 to 1
      :type u: array

      :returns: **log prior** -- Value of prior for given set of params
      :rtype: float


   .. method:: log_prob_express(self, params)

      Probability function to be used in emcee 'express' mode.
      By default they are all unifrom priors defined by self.lb and self.ub

      :param u: array of random numbers from 0 to 1
      :type u: array

      :returns: **log prob** -- Value of log Probability for given set of params
      :rtype: float


   .. method:: run_dynesty(self, method='full', sampler_kwargs={}, run_nested_kwargs={}, prior='min_results')

      Function to run dynesty to sample the posterier distribution using either the
      'full' methods which explores all paramters, or the 'express' method which sets
      the structural parameters.

      :param method: Which method to use to run dynesty
      :type method: str: 'full' or 'express'
      :param sampler_kwargs: set of keyword arguments to pass the the dynesty DynamicNestedSampler call, see:
                             https://dynesty.readthedocs.io/en/latest/api.html#dynesty.dynesty.DynamicNestedSampler
      :type sampler_kwargs: dict
      :param run_nested_kwargs: set of keyword arguments to pass the the dynesty run_nested call, see:
                                https://dynesty.readthedocs.io/en/latest/api.html#dynesty.dynamicsampler.DynamicSampler.run_nested
      :type run_nested_kwargs: dict
      :param prior: Which of the two choices of priors to use. The `min_results` priors are Gaussian,
                    with centers defined by the best fit paramters and variance equal to 4 times
                    the variance estimated using the Hessian matrix from the run_ls_min() run.
                    `uniform` is what it sounds like, uniform priors based on the the lower and upper bounds
                    Defualt is `min_results`
      :type prior: 'min_results' or 'uniform'

      :returns: **Posterior** -- Posterier distribution derrived. If method is 'express', the first 4 columns,
                containg x0, y0, PA and q, are all the same and equal to values used to pre-render the images
      :rtype: Array


   .. method:: run_emcee(self, method='express', nwalkers=32, max_it=int(1000000.0), check_freq=int(500), print_progress=False)

      Not sure if it will stay


   .. method:: save_results(self, file_name, run_basic_analysis=True, thin_posterier=1, zpt=None, cutoff=None, errp_lo=16, errp_hi=84)

      Function to save results after run_ls_min, run_dynesty and/or run_emcee is performed. Will be saved as an ASDF file.

      :param file_name: Str defining location of where to save data
      :type file_name: str
      :param run_basic_analysis: If true will run ImcascadeResults.run_basic_analysis
      :type run_basic_analysis: Bool (default True)

      :returns: **Posterior** -- Posterier distribution derrived. If method is 'express', the first 4 columns,
                containg x0,y0,PA and q, are all the same and equal to values used to pre-rended the images
      :rtype: Array



.. function:: initialize_fitter(im, psf, mask=None, err=None, x0=None, y0=None, re=None, flux=None, psf_oversamp=1, sky_model=True, log_file=None, readnoise=None, gain=None, exp_time=None)

   Function used to help Initialize Fitter instance from simple inputs

   :param im: The image or cutout to be fit with imcascade. If a string is given, it is
              interpretted as the location of a fits file with the cutout in it's first HDU.
              Otherwise is a 2D numpy array of the data to be fit
   :type im: str or 2D Array
   :param psf: Similar to above but for the PSF. If not using a PSF, the use None
   :type psf: str, 2D Array or None
   :param mask: Sources to be masked when fitting, if none is given then one will be derrived
   :type mask: 2D array (optional)
   :param err: Pixel errors used to calculate the weights when fitting. If none is given will
               use readnoise, gain and exp_time if given, or default to sep derrived rms
   :type err: 2D array (optional)
   :param x0: Inital guess at x position of center, if not will assume the center of the image
   :type x0: float (optional)
   :param y0: Inital guess at y position of center, if not will assume the center of the image
   :type y0: float (optional)
   :param re: Inital guess at the effective radius of the galaxy, if not given will estimate
              using sep kron radius
   :type re: float (optional)
   :param flux: Inital guess at the flux of the galaxy, if not given will estimate
                using sep flux
   :type flux: float (optional)
   :param psf_oversamp: Oversampling of PSF given, default is 1
   :type psf_oversamp: float (optional)
   :param sky_model: Whether or not to model sky as tilted-plane, default is True
   :type sky_model: boolean (optional)
   :param log_file: Location of log file
   :type log_file: str (optional)
   :param readnoise,gain,exp_time: The read noise (in electrons), gain and exposure time of image that is
                                   used to calculate the errors and therefore pixel weights. Only used if
                                   ``err = None``. If these parameters are also None, then will estimate
                                   pixel errors using sep rms map.
   :type readnoise,gain,exp_time: float,float,float (all optional)

   :returns: **Fitter** -- Returns intialized instance of imcascade.fitter.Fitter which can then
             be used to fit galaxy and analyze results.
   :rtype: imcascade.fitter.Fitter


